def withdraw(self, amount, source_account_num):
        self.checkForSufficientFunds(self.balance(source_account_num), amount)
        self.dt.execute("update ACCOUNT set BALANCE = BALANCE - %s where ACCOUNT_NUM = %s", (amount, source_account_num))

    def deposit(self, amount, target_account_num):
        # Implicitly testing for valid account number
        self.balance(target_account_num)
        self.dt.execute("update ACCOUNT set BALANCE = BALANCE + %s where ACCOUNT_NUM = %s", (amount, target_account_num))


#checkingapi
@app.route('/depositt', methods=['POST'])
def depositt():
     data = request.json
     amount = data['amount']
     total = data['amount'] + balancee
     return str(total)


 # amount = int(input('Enter the amount to withdraw:')) 
        # pin =input('enter pin')
          # email = input('enter email')

#checkingapi
@app.route('/withdraww', methods=['POST'])   
def withdraww():
    data = request.json
    amount = data['amount']
    if amount > balancee:
        return jsonify('Insufficient Balance')
    else:
       total = balancee - data['amount']
       return str(total)        



@app.route('/history')
def history():

  
  print("1. Deposit money 2. withdraw 3. view details")
  choice = int(input('enter choice:'))

    
  if choice ==1:
    email = input('enter email')
    deposit = int(input(' enter amount'))
    typ = 'deposit'
    now = datetime.now()
    my_cursor = mydb.cursor(MySQLdb.cursors.DictCursor)
    my_cursor.execute('''INSERT INTO transactions(email, amount, type, date) VALUES (%s, %s, %s, %s)''', (email,deposit, typ, now))
    # my_cursor.execute("update register set balance=balance+'" +str(deposit) + "' where email='" + email + "'")
    print(deposit,"is successful")
  elif choice ==2:
        withdraw = int(input('amount'))
        typ = 'withdraw'
        now = datetime.now()
  else:
        return ('invalid request')    



